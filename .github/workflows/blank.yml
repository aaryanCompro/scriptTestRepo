name: Update New Relic Synthetic Monitor Scripts

on:
  push:
    branches:
      - qa
      - stage
      - dev
    paths:
      - seleniumScriptTeacher.js
      - seleniumScriptStudent.js

jobs:
  update-monitor-scripts:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'qa' ||  github.ref == 'refs/heads/stage' && 'stage' ||  github.ref == 'refs/heads/dev' && 'dev' || 'dev' }}  # Default to 'dev' if none of the above match

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2 # Fetch at least the last 2 commits to ensure `HEAD^` exists

    - name: Set environment variables based on branch
      id: set-env
      run: |
        if [ "${{ github.ref_name }}" == "dev" ]; then
          echo "env=dev" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.NEW_RELIC_API_KEY }}" >> $GITHUB_ENV
          echo "API_ENDPOINT=${{ secrets.NEW_RELIC_API_ENDPOINT }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_TEACHER=${{ secrets.NEW_RELIC_MONITOR_UUID_TEACHER }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_STUDENT=${{ secrets.NEW_RELIC_MONITOR_UUID_STUDENT }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" == "qa" ]; then
          echo "env=qa" >> $GITHUB_ENV
          echo "API_ENDPOINT=${{ secrets.NEW_RELIC_API_ENDPOINT }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.NEW_RELIC_API_KEY }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_TEACHER=${{ secrets.NEW_RELIC_MONITOR_UUID_TEACHER }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_STUDENT=${{ secrets.NEW_RELIC_MONITOR_UUID_STUDENT }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" == "stage" ]; then
          echo "env=stage" >> $GITHUB_ENV
          echo "API_ENDPOINT=${{ secrets.NEW_RELIC_API_ENDPOINT }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.NEW_RELIC_API_KEY }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_TEACHER=${{ secrets.NEW_RELIC_MONITOR_UUID_TEACHER }}" >> $GITHUB_ENV
          echo "MONITOR_UUID_STUDENT=${{ secrets.NEW_RELIC_MONITOR_UUID_STUDENT }}" >> $GITHUB_ENV
        else
          echo "Error: Unsupported branch: ${{ github.ref_name }}"
          exit 1
        fi

    - name: Base64 encode and update scripts
      run: |
        update_script() {
          local file_path="$1"
          local monitor_uuid="$2"
          
          if [ ! -f "$file_path" ]; then
            echo "Error: Script file does not exist: $file_path"
            exit 1
          fi

          base64_encoded=$(base64 -w 0 "$file_path")
          script_payload="{\"scriptText\":\"$base64_encoded\"}"

          curl -v -X PUT \
            -H "Api-Key:$API_KEY" \
            -H 'Content-Type: application/json' \
            "$API_ENDPOINT/v3/monitors/$monitor_uuid/script" \
            -d "$script_payload"

          if [ $? -ne 0 ]; then
            echo "Error: Failed to update the Synthetic Monitor script for $file_path."
            exit 1
          fi

          echo "Synthetic Monitor script for $file_path and monitor id $monitor_uuid updated successfully."
        }

        # Check if seleniumScriptTeacher.js was modified
        if git diff --name-only HEAD^ HEAD | grep -q "seleniumScriptTeacher.js"; then
          echo "Updating seleniumScriptTeacher.js..."
          update_script "./seleniumScriptTeacher.js" "$MONITOR_UUID_TEACHER"
        fi

        # Check if seleniumScriptStudent.js was modified
        if git diff --name-only HEAD^ HEAD | grep -q "seleniumScriptStudent.js"; then
          echo "Updating seleniumScriptStudent.js..."
          update_script "./seleniumScriptStudent.js" "$MONITOR_UUID_STUDENT"
        fi